local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local Teleporter = {}
Teleporter.__index = Teleporter

-- // teleport example:
--[[
    local Teleports = {
        Bank = CFrame.new(244, 543, 231)
        Jewel = CFrame.new(0, 0, 0)
    }

    local Teleporter = TeleportModule.new({
        Teleports = Teleports,
        TeleportFn = myCustomTeleportFunction
    })

    Teleporter:TeleportTo("Bank")
]]

function Teleporter.new(teleporterOptions)
    assert(teleporterOptions.Teleports ~= nil, "must have Teleports in teleporterOptions!")

    local self = setmetatable({}, Teleporter)

    self.Teleports = teleporterOptions.Teleports
    self.TeleportFn = teleporterOptions.TeleportFn or function (teleportName)
        local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        character:FindFirstChild("HumanoidRootPart").CFrame = self.teleports[teleportName]

        if not success and error then
            return error(error)
        end
    end

    return self
end

function Teleporter:GetTeleportKeys()
    local keys = {}

    for k, _ in pairs(self.Teleports) do
        table.insert(keys, k)
    end

    return keys
end

function Teleporter:TeleportTo(teleportName)
    assert(self.Teleports[teleportName] ~= nil, "teleportName doesnt exist in Teleports!")
    assert(typeof(self.Teleports[teleportName]) == "CFrame", "self.Teleports[teleportName] (" .. teleportName .. ") must be a CFrame value!")

    local teleportFunction = self.TeleportFn
    local success, err = pcall(teleportFunction, self.Teleports[teleportName])

    if not success then
        warn(err)
    end

    return success
end

return Teleporter