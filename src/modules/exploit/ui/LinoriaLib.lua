local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet('https://gist.githubusercontent.com/technorav3nn/461bc96a7cf4c1acf12794f5850f21cc/raw/7f0858a86daf5ec357932a609641bb0ea93829f7/linoria-work-swm.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Util = require("modules/util/Util")
local ChamsLibrary = require("modules/exploit/visuals/Chams")

local Chams = ChamsLibrary.new({
    Enabled = false,
    UseTeamColor = false,
    Color = Color3.new(0.035294, 0.309803, 1)
})

local Linoria = {}

function Linoria:createLinoriaLib(gameName, size)
    Library:SetWatermarkVisibility(true)
    Library:SetWatermark('project floppa - ' .. gameName)

    local Window = Library:CreateWindow({
        Size = size,
        Title = "project floppa - build " .. Util:getBuildId(),
        Center = true,
        AutoShow = true,
    })

    return Library, Window
end

function Linoria:initManagers(Lib, Window)
    ThemeManager.BuiltInThemes.Default[2].AccentColor = Color3.fromRGB(255, 65, 65):ToHex()

    local Settings = Window:AddTab("Settings")

    ThemeManager:SetLibrary(Lib)

    SaveManager:SetLibrary(Lib)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

    ThemeManager:SetFolder('project-floppa')

    SaveManager:SetFolder('project-floppa/game')
    SaveManager:BuildConfigSection(Settings)

    ThemeManager:ApplyToTab(Settings)

    return Settings
end

function Linoria:buildChamsGroupBox(ChamsGroupBox)
    ChamsGroupBox:AddToggle('ChamsEnabled', { Text = "Enabled" })
    :OnChanged(function()
        Chams:Toggle(Toggles.ChamsEnabled.Value)
    end)

    ChamsGroupBox:AddDivider()

    ChamsGroupBox:AddSlider('ChamsFillTransparency', {
        Text = "Fill Transparency",
        Rounding = 1,
        Default = 0.5,
        Min = 0,
        Max = 1,
    })
    :OnChanged(function()
        Chams.FillTransparency = Options.ChamsFillTransparency.Value
    end)

    ChamsGroupBox:AddSlider('ChamsOutlineTransparency', {
        Text = "Outline Transparency",
        Rounding = 1,
        Default = 0.5,
        Min = 0,
        Max = 1,
    })
    :OnChanged(function()
        Chams.OutlineTransparency = Options.ChamsOutlineTransparency.Value
    end)

    ChamsGroupBox:AddDivider()


    ChamsGroupBox:AddLabel('Fill Color'):AddColorPicker('ChamsFillColor', {
        Default = Chams.Color,
        Title = 'Fill Color',
    })

    Options.ChamsFillColor:OnChanged(function()
        Chams.Color = Options.ChamsFillColor.Value
    end)

    ChamsGroupBox:AddToggle("ChamsRainbowColor", { Text = "Rainbow Color" })

    task.spawn(function()
        local i = 1
        while task.wait() do
            if Toggles.ChamsRainbowColor and Toggles.ChamsRainbowColor.Value then
                i = i + 1
                local col = Color3.fromHSV(i/360, 1, 1)
                if i == 360 then
                    i = 1
                end
                print(col)
                Options.ChamsFillColor:SetValueRGB(col)
            end
        end
    end)
end

function Linoria:buildESPBoxes(ESPTabBox)
    local ESP = require("modules/exploit/visuals/ESP")

    local ESPTab = ESPTabBox:AddLeftGroupbox("ESP")
    local ESPOptionsTab = ESPTabBox:AddRightGroupbox("ESP Options")

    ESPTab:AddToggle("ESPEnabled", { Text = "Enabled "}):OnChanged(function() ESP:Toggle(Toggles.ESPEnabled.Value) end)
    ESPTab:AddToggle("PlayerESPEnabled", { Text = "Show Players" }):OnChanged(function() ESP.Players = Toggles.PlayerESPEnabled.Value end)
    
    ESPOptionsTab:AddToggle("UseTeamColor", { Text = "Use Team Color", Default = true }):OnChanged(function() ESP.TeamColor = Toggles.UseTeamColor.Value end)
    ESPOptionsTab:AddToggle("ShowNames", { Text = "Show Names", Default = true }):OnChanged(function() ESP.Names = Toggles.ShowNames.Value end)
    ESPOptionsTab:AddToggle("ShowBoxes", { Text = "Show Boxes", Default = true }):OnChanged(function() ESP.Boxes = Toggles.ShowBoxes.Value end)
    ESPOptionsTab:AddToggle("ShowTracers", { Text = "Show Tracers" }):OnChanged(function() ESP.Tracers = Toggles.ShowTracers.Value end)
    ESPOptionsTab:AddToggle("ShowEquippedItem", { Text = "Show Equipped Item" }):OnChanged(function() ESP.Equipped = Toggles.ShowEquippedItem.Value end)
    ESPOptionsTab:AddToggle("ShowHealth", { Text = "Show Health Bars", Default = false }):OnChanged(function() ESP.HealthBar = Toggles.ShowHealth.Value end)
    ESPOptionsTab:AddToggle("ShowDistance", { Text = "Show Distance", Default = true }):OnChanged(function() ESP.Distance = Toggles.ShowDistance.Value end)

    ESPOptionsTab:AddSlider("MaxShownDistance", {
        Min = 200,
        Max = 10000,
        Default = 2000,
        Text = "Max Shown Distance",
        Compact = true,
        Rounding = 0
    }):OnChanged(function() ESP.MaxShownDistance = Options.MaxShownDistance.Value end)

    return ESPTab, ESPOptionsTab, ESP
end

return Linoria