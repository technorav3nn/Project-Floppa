-- // A class to use the Highlight feature as chams
-- // Some parts taken from wally's script showing the
-- // highlight feature.

-- // Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- // Variables
local RenderStepped = RunService.RenderStepped

-- // Chams

local Chams = {}
Chams.__index = Chams

function Chams.new()
    local self = setmetatable({
        Enabled = true,
        UseTeamColor = true,
        Color = Color3.fromRGB(255, 0, 0),
        Objects = {}
    }, Chams)

    self:_init()

    return self
end

function Chams:_init()
    local chamsFolder = Instance.new("Folder", CoreGui)
    chamsFolder.Name = "Chams"

    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(char)
            self:_MakeCham(char)
        end)
    end)

    Players.PlayerRemoving:Connect(function(player)
        if self.Objects[player.Character.Name] then
            self.Objects[player.Character.Name]:Destroy()
            self.Objects[player.Character.Name] = nil
        end
    end)

    for _, player in ipairs(Players:GetPlayers()) do
        self:_MakeEsp(player.Character)
    end

    self.RenderSteppedLoop = RenderStepped:Connect(function()
        ---@type Highlight
        for _, highlight in pairs(self.Objects) do
            local player = Players:GetPlayerFromCharacter(highlight.Adornee)
            local colorToUse = self.UseTeamColor and player.TeamColor.Color or self.Color

            highlight.Enabled = self.Enabled
            highlight.OutlineColor = colorToUse
            highlight.FillColor = colorToUse        
        end
    end)
end

function Chams:_MakeCham(char)
    pcall(function()
        local player = Players:GetPlayerFromCharacter(char)
        local colorToUse = self.UseTeamColor and player.TeamColor.Color or self.Color

        local highlight = Instance.new("Highlight", CoreGui.Chams)

        highlight.Name = char.Name
        highlight.Adornee = char
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.OutlineColor = colorToUse
        highlight.FillColor = colorToUse

        self.Objects[char.Name] = highlight
    end)
end

function Chams:Toggle(state)
    assert(type(state) == "boolean", "state of chams must be boolean!")
    self.Enabled = state
end

return Chams